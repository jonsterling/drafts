#+TITLE: Interesting Packages

Here's an accumulation of packages I think would be worth reading
"Examining Hackage" style.

I will never ever write about all of these and I encourage you (yes
you) to try your hand at reading some Haskell code. It's really not as
bad as you'd think.

If you have suggestions ping me.

* A Quick Word On Difficulty Assignment
I've assigned difficulty here with a bit of an odd metric. It's worth
noting that before you read the rest

 - Easy: person who has written a project or two in Haskell and is
   familiar with the topic could read this.
 - Medium: A person who has done the equivalent work of publishing a
   hackage package and is familiar with the material could read this
 - Hard: Not an easy read for anyone, but enlightening for those who
   struggle through

So please don't interpreter LYAH = Easy, RWH = Medium. I think if you
read them like that I'd seem like a tremendous jerk :) These are all
fairly widely used packages and do have some sharp corners.

* Easy
** transformers
This would be a lot of code, but not a lot of extremely clever
code. Most of what lives in transformers is very familiar to
Haskellers.

If someone ever wanted to do a guest post this would be a good
package for it.

** mtl
Similar to the above, there's a whole lot of code here but most of
this is just a good example of organizing a lot of Haskell code around
type classes. We do have people re-write a lot of these functions to
learn about monads so it's not *that* horrible.

** lens-family
Easy is maybe a reach here, but lens-family really doesn't have the
scaryness of lens in it. Most of this is the classic lenses that you
see in tutorials and stuff. Probably want to skip the template Haskell
bits which are a bit hairy.

* Medium
** recursion-schemes
The code is actually just a single file. I think a couple hours with a
white board should be enough to understand everything in there.

** free
A proper tutorial of what "freeness" is (which may need a proper
tutorial on adjunctions) would be needed. Otherwise most of this code
is very interesting. I think the brunt of the work would be
understanding the ~5 data types lurking in there.

* Hard
** vector
This would be super cool, but vector has a lot of unsafe code, fusion,
low level optimizations, and other frightening things. Maybe on this
upcoming plane ride.

** Idris-dev
Not the whole thing obviously, but I think chasing down how something
like laziness is implemented would be enlightening and possible.

** epic
This is a relatively small compiler basically. It's also by Edwin
Brady and AFAIK implements a G-machine and compiles to C. The
interface it provides would also be a fun study.

Personal note: How hard could an epi -> JS compiler be..
